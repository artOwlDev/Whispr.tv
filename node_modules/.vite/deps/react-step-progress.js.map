{
  "version": 3,
  "sources": ["../../react-step-progress/src/models/index.ts", "../../react-step-progress/src/index.tsx"],
  "sourcesContent": ["export enum StepStates {\n  NOT_STARTED = 'not_started',\n  CURRENT = 'current',\n  ERROR = 'error',\n  COMPLETED = 'completed'\n}\n\nexport interface ProgressStep {\n  label: string;\n  subtitle?: string;\n  name: string;\n  state?: StepStates;\n  content: React.ReactNode;\n  validator?: (payload?: any) => boolean;\n}\n\nexport interface StepProgressProps {\n  steps: ProgressStep[];\n  startingStep: number;\n  wrapperClass?: string;\n  progressClass?: string;\n  stepClass?: string;\n  labelClass?: string;\n  subtitleClass?: string;\n  contentClass?: string;\n  buttonWrapperClass?: string;\n  primaryBtnClass?: string;\n  secondaryBtnClass?: string;\n  submitBtnName?: string;\n  onSubmit: Function;\n  previousBtnName?: string;\n  nextBtnName?: string;\n}\n\nexport interface ReducerAction {\n  type: string;\n  payload: { index: number; state: StepStates };\n}\n", "import * as React from 'react';\nimport styles from './styles.module.css';\n\nimport { StepStates, ProgressStep, StepProgressProps, ReducerAction } from './models';\n\nfunction stepsReducer(steps: ProgressStep[], action: ReducerAction): ProgressStep[] {\n\n  return steps.map(function (step, i) {\n\n    if (i < action.payload.index) {\n      step.state = StepStates.COMPLETED;\n    } else if (i === action.payload.index) {\n      step.state = action.payload.state;\n    } else {\n      step.state = StepStates.NOT_STARTED;\n    }\n    return step;\n  });\n}\n\nfunction StepProgressBar(props: StepProgressProps): JSX.Element {\n  const {\n    steps,\n    startingStep,\n    wrapperClass,\n    progressClass,\n    stepClass,\n    labelClass,\n    subtitleClass,\n    contentClass,\n    buttonWrapperClass,\n    primaryBtnClass,\n    secondaryBtnClass,\n    submitBtnName,\n    onSubmit,\n    previousBtnName,\n    nextBtnName\n  } = props;\n  const [state, dispatch] = React.useReducer(stepsReducer, steps);\n  const [currentIndex, setCurrentIndex] = React.useState(startingStep);\n\n  React.useEffect(function () {\n    dispatch({\n      type: 'init',\n      payload: { index: currentIndex, state: StepStates.CURRENT }\n    });\n  }, []);\n\n  function submitHandler(): void {\n    onSubmit();\n  }\n\n  function nextHandler(): void {\n\n    if (currentIndex === steps.length - 1) {\n      return;\n    }\n    let isStateValid = true;\n    const stepValidator = state[currentIndex].validator;\n\n    if (stepValidator) {\n      isStateValid = stepValidator();\n    }\n    dispatch({\n      type: 'next',\n      payload: {\n        index: isStateValid ? currentIndex + 1 : currentIndex,\n        state: isStateValid ? StepStates.CURRENT : StepStates.ERROR\n      }\n    });\n\n    if (isStateValid) {\n      setCurrentIndex(currentIndex + 1);\n    }\n  }\n\n  function prevHandler(): void {\n\n    if (currentIndex === 0) {\n      return;\n    }\n\n    dispatch({\n      type: 'previous',\n      payload: {\n        index: currentIndex - 1,\n        state: StepStates.CURRENT\n      }\n    });\n    setCurrentIndex(currentIndex - 1);\n  }\n\n  return (\n    <div className={`${styles['progress-bar-wrapper']} ${wrapperClass || ''}`}>\n      <ul className={`${styles['step-progress-bar']} ${progressClass || ''}`}>\n        {state.map(function (step, i) {\n          return (\n            <li\n              key={i}\n              className={`${styles['progress-step']}${\n                step.state === StepStates.COMPLETED ? ` ${styles.completed}` : ''\n              }${step.state === StepStates.CURRENT ? ` ${styles.current}` : ''}${\n                step.state === StepStates.ERROR ? ` ${styles['has-error']}` : ''\n              } ${stepClass || ''}`}\n            >\n              {step.state === StepStates.COMPLETED && (\n                <span className={styles['step-icon']}>\n                  <svg\n                    width=\"1.5rem\"\n                    viewBox=\"0 0 13 9\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path d=\"M1 3.5L4.5 7.5L12 1\" stroke=\"white\" strokeWidth=\"1.5\" />\n                  </svg>\n                </span>\n              )}\n              {step.state === StepStates.ERROR && <span className={styles['step-icon']}>!</span>}\n              {step.state !== StepStates.COMPLETED && step.state !== StepStates.ERROR && (\n                <span className={styles['step-index']}>{i + 1}</span>\n              )}\n              <div className={`${styles['step-label']} ${labelClass || ''}`}>\n                {step.label}\n                {step.subtitle && (\n                  <div className={`${styles['step-label-subtitle']} ${subtitleClass || ''}`}>\n                    {step.subtitle}\n                  </div>\n                )}\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n\n      <div className={`${styles['step-content']} ${contentClass || ''}`}>\n        {state[currentIndex].content}\n      </div>\n\n      <div className={`${styles['step-buttons']} ${buttonWrapperClass || ''}`}>\n        <a\n          className={`${styles['step-action-btn']} ${styles['action-btn-secondary']} ${\n            currentIndex === 0 ? styles.disabled : ''\n          } ${secondaryBtnClass || ''}`}\n          onClick={prevHandler}\n        >\n          {previousBtnName ? previousBtnName : 'Previous'}\n        </a>\n        {currentIndex === state.length - 1 ? (\n          <a\n            className={`${styles['step-action-btn']} ${styles['action-btn-primary']} ${\n              primaryBtnClass || ''\n            }`}\n            onClick={submitHandler}\n          >\n            {submitBtnName || 'Submit'}\n          </a>\n        ) : (\n          <a\n            className={`${styles['step-action-btn']} ${styles['action-btn-primary']} ${\n              primaryBtnClass || ''\n            }`}\n            onClick={nextHandler}\n          >\n            {nextBtnName ? nextBtnName : 'Next'}\n          </a>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default StepProgressBar;\n"],
  "mappings": ";;;;;;;;;;AAAA,IAAYA;CAAZ,SAAYA,aAAAA;AACVA,EAAAA,YAAAA,aAAAA,IAAA;AACAA,EAAAA,YAAAA,SAAAA,IAAA;AACAA,EAAAA,YAAAA,OAAAA,IAAA;AACAA,EAAAA,YAAAA,WAAAA,IAAA;AACD,GALWA,eAAAA,aAAU,CAAA,EAAtB;ACKA,SAASC,aAAaC,OAAuBC,QAA7C;AAEE,SAAOD,MAAME,IAAI,SAAUC,MAAMC,GAAhB;AAEf,QAAIA,IAAIH,OAAOI,QAAQC,OAAO;AAC5BH,WAAKI,QAAQT,WAAWU;IACzB,WAAUJ,MAAMH,OAAOI,QAAQC,OAAO;AACrCH,WAAKI,QAAQN,OAAOI,QAAQE;IAC7B,OAAM;AACLJ,WAAKI,QAAQT,WAAWW;IACzB;AACD,WAAON;EACR,CAVM;AAWR;AAED,SAASO,gBAAgBC,OAAzB;MAEIX,QAeEW,MAfFX,OACAY,eAcED,MAdFC,cACAC,eAaEF,MAbFE,cACAC,gBAYEH,MAZFG,eACAC,YAWEJ,MAXFI,WACAC,aAUEL,MAVFK,YACAC,gBASEN,MATFM,eACAC,eAQEP,MARFO,cACAC,qBAOER,MAPFQ,oBACAC,kBAMET,MANFS,iBACAC,oBAKEV,MALFU,mBACAC,gBAIEX,MAJFW,eACAC,WAGEZ,MAHFY,UACAC,kBAEEb,MAFFa,iBACAC,cACEd,MADFc;8BAEwBC,yBAAiB3B,cAAcC,KAA/B,GAAnBO,QAAAA,kBAAAA,CAAAA,GAAOoB,WAAAA,kBAAAA,CAAAA;4BAC0BD,uBAAed,YAAf,GAAjCgB,eAAAA,gBAAAA,CAAAA,GAAcC,kBAAAA,gBAAAA,CAAAA;AAErBH,8BAAgB,WAAA;AACdC,aAAS;MACPG,MAAM;MACNzB,SAAS;QAAEC,OAAOsB;QAAcrB,OAAOT,WAAWiC;MAAzC;IAFF,CAAD;EAIT,GAAE,CAAA,CALH;AAOA,WAASC,gBAAT;AACET,aAAQ;EACT;AAED,WAASU,cAAT;AAEE,QAAIL,iBAAiB5B,MAAMkC,SAAS,GAAG;AACrC;IACD;AACD,QAAIC,eAAe;AACnB,QAAMC,gBAAgB7B,MAAMqB,YAAD,EAAeS;AAE1C,QAAID,eAAe;AACjBD,qBAAeC,cAAa;IAC7B;AACDT,aAAS;MACPG,MAAM;MACNzB,SAAS;QACPC,OAAO6B,eAAeP,eAAe,IAAIA;QACzCrB,OAAO4B,eAAerC,WAAWiC,UAAUjC,WAAWwC;MAF/C;IAFF,CAAD;AAQR,QAAIH,cAAc;AAChBN,sBAAgBD,eAAe,CAAhB;IAChB;EACF;AAED,WAASW,cAAT;AAEE,QAAIX,iBAAiB,GAAG;AACtB;IACD;AAEDD,aAAS;MACPG,MAAM;MACNzB,SAAS;QACPC,OAAOsB,eAAe;QACtBrB,OAAOT,WAAWiC;MAFX;IAFF,CAAD;AAORF,oBAAgBD,eAAe,CAAhB;EAChB;AAED,aACEF,4BAAA,OAAA;IAAKc,WAAcC,OAAO,sBAAD,IAAX,OAAuC5B,gBAAgB;SACnEa,4BAAA,MAAA;IAAIc,WAAcC,OAAO,mBAAD,IAAX,OAAoC3B,iBAAiB;KAC/DP,MAAML,IAAI,SAAUC,MAAMC,GAAhB;AACT,eACEsB,4BAAA,MAAA;MACEgB,KAAKtC;MACLoC,WAAS,KAAKC,OAAO,eAAD,KAClBtC,KAAKI,UAAUT,WAAWU,YAA1B,MAA0CiC,OAAOE,YAAc,OAC9DxC,KAAKI,UAAUT,WAAWiC,UAA1B,MAAwCU,OAAOG,UAAY,OAC5DzC,KAAKI,UAAUT,WAAWwC,QAA1B,MAAsCG,OAAO,WAAD,IAAkB,MAHvD,OAIL1B,aAAa;OAEhBZ,KAAKI,UAAUT,WAAWU,iBACzBkB,4BAAA,QAAA;MAAMc,WAAWC,OAAO,WAAD;WACrBf,4BAAA,OAAA;MACEmB,OAAM;MACNC,SAAQ;MACRC,MAAK;MACLC,OAAM;WAENtB,4BAAA,QAAA;MAAMuB,GAAE;MAAsBC,QAAO;MAAQC,aAAY;KAAzD,CANF,CADF,GAWDhD,KAAKI,UAAUT,WAAWwC,aAASZ,4BAAA,QAAA;MAAMc,WAAWC,OAAO,WAAD;OAAvB,GAAA,GACnCtC,KAAKI,UAAUT,WAAWU,aAAaL,KAAKI,UAAUT,WAAWwC,aAChEZ,4BAAA,QAAA;MAAMc,WAAWC,OAAO,YAAD;OAAiBrC,IAAI,CAA5C,OAEFsB,4BAAA,OAAA;MAAKc,WAAcC,OAAO,YAAD,IAAX,OAA6BzB,cAAc;OACtDb,KAAKiD,OACLjD,KAAKkD,gBACJ3B,4BAAA,OAAA;MAAKc,WAAcC,OAAO,qBAAD,IAAX,OAAsCxB,iBAAiB;OAClEd,KAAKkD,QADR,CAHJ,CAxBF;EAkCH,CApCA,CADH,OAwCA3B,4BAAA,OAAA;IAAKc,WAAcC,OAAO,cAAD,IAAX,OAA+BvB,gBAAgB;KAC1DX,MAAMqB,YAAD,EAAe0B,OADvB,OAIA5B,4BAAA,OAAA;IAAKc,WAAcC,OAAO,cAAD,IAAX,OAA+BtB,sBAAsB;SACjEO,4BAAA,KAAA;IACEc,WAAcC,OAAO,iBAAD,IAAX,MAAkCA,OAAO,sBAAD,IAAxC,OACPb,iBAAiB,IAAIa,OAAOc,WAAW,MADhC,OAELlC,qBAAqB;IACzBmC,SAASjB;KAERf,kBAAkBA,kBAAkB,UANvC,GAQCI,iBAAiBrB,MAAM2B,SAAS,QAC/BR,4BAAA,KAAA;IACEc,WAAcC,OAAO,iBAAD,IAAX,MAAkCA,OAAO,oBAAD,IAAxC,OACPrB,mBAAmB;IAErBoC,SAASxB;KAERV,iBAAiB,QANpB,QASAI,4BAAA,KAAA;IACEc,WAAcC,OAAO,iBAAD,IAAX,MAAkCA,OAAO,oBAAD,IAAxC,OACPrB,mBAAmB;IAErBoC,SAASvB;KAERR,cAAcA,cAAc,MAN/B,CAnBJ,CA7CF;AA4EH;;",
  "names": ["StepStates", "stepsReducer", "steps", "action", "map", "step", "i", "payload", "index", "state", "COMPLETED", "NOT_STARTED", "StepProgressBar", "props", "startingStep", "wrapperClass", "progressClass", "stepClass", "labelClass", "subtitleClass", "contentClass", "buttonWrapperClass", "primaryBtnClass", "secondaryBtnClass", "submitBtnName", "onSubmit", "previousBtnName", "nextBtnName", "React", "dispatch", "currentIndex", "setCurrentIndex", "type", "CURRENT", "submitHandler", "nextHandler", "length", "isStateValid", "stepValidator", "validator", "ERROR", "prevHandler", "className", "styles", "key", "completed", "current", "width", "viewBox", "fill", "xmlns", "d", "stroke", "strokeWidth", "label", "subtitle", "content", "disabled", "onClick"]
}
